<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Walker&#39;s blog</title>
    <link>https://walkerliu.top/post/</link>
    <description>Recent content in Posts on Walker&#39;s blog</description>
    <image>
      <title>Walker&#39;s blog</title>
      <url>https://walkerliu.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://walkerliu.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Feb 2023 13:31:02 +0800</lastBuildDate><atom:link href="https://walkerliu.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSA算法</title>
      <link>https://walkerliu.top/post/rsa%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 21 Feb 2023 13:31:02 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/rsa%E7%AE%97%E6%B3%95/</guid>
      <description>公钥与私钥的产生 等价符号（≡） 符号 ≡ 在模运算中使用，表示两个整数除以给定模数时具有相同的余数。例如，如果a和b是两个整数，m是正整数，那么 $$a ≡ b (mod m) $$等价 $$a% m = b % m$$
原理 一句话概括 在RSA 加密方案中，选定了素数 p,q计算出N = p* q，再在小于 φ(n)的正整数中选一个和它互素的e作为公匙，它模 φ(n)的乘法逆元d 作为私匙。公开e,保留d
第一步，随机选择两个不相等的质数p和q。
alice选择了61和53。（实际应用中，这两个质数越大，就越难破解。）
第二步，计算p和q的乘积n。
alice就把61和53相乘。
$$n = 61×53 = 3233$$
n的长度就是密钥长度。3233写成二进制是$110010100001$，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。
第三步，计算n的欧拉函数φ(n)。
根据公式：
$$φ(n)=(p−1)(q−1)φ(n) = (p-1)(q-1)φ(n)=(p−1)(q−1)$$
alice算出φ(3233)等于60×52，即3120。
第四步，随机选择一个整数e，条件是1&amp;lt; e &amp;lt; φ(n)，且e与φ(n) 互质。
alice就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）
第五步，计算e对于φ(n)的模反元素d。
所谓&amp;ldquo;模反元素&amp;rdquo;就是指有一个整数d，可以使得ed被φ(n)除的余数为1。
$ed ≡ 1 (mod φ(n))$
这个式子等价于
$$ed - 1 = kφ(n)$$
于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。
$$ex + φ(n)y = 1$$
已知 e=17, φ(n)=3120，</description>
    </item>
    
    <item>
      <title>用户态和内核态</title>
      <link>https://walkerliu.top/post/%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81/</link>
      <pubDate>Tue, 21 Feb 2023 13:26:06 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81/</guid>
      <description>定义 内核态：cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序。
用户态：只能受限的访问内存，且不允许访问外围设备，占用cpu的能力被剥夺，cpu资源可以被其他程序获取。
为什么要有用户态和内核态？
由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据, 并发送到网络, CPU划分出两个权限等级 &amp;ndash; 用户态和内核态。 用户态和内核态的切换 所有用户程序都是运行在用户态的, 但是有时候程序确实需要做一些内核态的事情, 例如从硬盘读取数据, 或者从键盘获取输入等. 而唯一可以做这些事情的就是操作系统, 所以此时程序就需要先操作系统请求以程序的名义来执行这些操作.
这时需要一个这样的机制: 用户态程序切换到内核态, 但是不能控制在内核态中执行的指令
这种机制叫系统调用, 在CPU中的实现称之为陷阱指令(Trap Instruction) 并且用户模式和系统模式之间的转换是由操作系统通过系统调用或中断来控制的。
他们的工作流程如下:
用户态程序将一些数据值放在寄存器中, 或者使用参数创建一个堆栈(stack frame), 以此表明需要操作系统提供的服务. 用户态程序执行陷阱指令 CPU切换到内核态, 并跳到位于内存指定位置的指令, 这些指令是操作系统的一部分, 他们具有内存保护, 不可被用户态程序访问 这些指令称之为陷阱(trap)或者系统调用处理器(system call handler). 他们会读取程序放入内存的数据参数, 并执行程序请求的服务 系统调用完成后, 操作系统会重置CPU为用户态并返回系统调用的结果 当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于内核运行态（或简称为内核态）。
当进程处于内核态时，执行的内核代码会使用当前进程的内核栈。每个进程都有自己的内核栈。当进程在执行用户自己的代码时，则称其处于用户运行态（用户态）。
系统调用开销大 平时说的系统调用开销大，主要是相对于函数调用来说的。
一般的，进程是不能访问内核的。它不能访问内核所占内存空间也不能调用内核函数。CPU硬件决定了这些（这就是为什么它被称作**“保护模式”**)
对于一个函数调用，汇编层面上就是一个CALL或者JMP，这种指令在硬件层面上虽然首次是会打乱流水线的，但如果是十分有规律的情况下，大多数CPU都能很好的处理。
锁开销和上下文切换开销 互斥锁的开销主要在内核态与用户态的切换 申请锁时，从用户态进入内核态，申请到后从内核态返回用户态（两次切换）；没有申请到时阻塞睡眠在内核态。使用完资源后释放锁，从用户态进入内核态，唤醒阻塞等待锁的进程，返回用户态（又两次切换）；被唤醒进程在内核态申请到锁，返回用户态（可能其他申请锁的进程又要阻塞）。所以，使用一次锁，包括申请，持有到释放，当前进程要进行四次用户态与内核态的切换。同时，其他竞争锁的进程在这个过程中也要进行一次切换。
进程上下文切换的直接消耗包括CPU寄存器保存和加载，需要调度时有内核调度代码的执行。
上下文切换开销 进程切换
进行进程切换就是从正在运行的进程中收回处理器，然后再使待运行进程来占用处理器。　这里所说的从某个进程收回处理器，实质上就是把进程存放在处理器 的寄存器中的中间数据找个地方存起来，从而把处理器的寄存器腾出来让其他进程使用。那么被中止运行进程的中间数据存在何处好呢？当然这个地方应该是进程的 私有堆栈。
让进程来占用处理器，实质上是把某个进程存放在私有堆栈中寄存器的数据（前一次本进程被中止时的中间数据）再恢复到处理器的寄存器中去，并把待运行进程的断点送入处理器的程序指针PC，于是待运行进程就开始被处理器运行了，也就是这个进程已经占有处理器的使用权了。
调度器进程切换的代码应有如下功能：
●保存处理器PC寄存器的值到被中止进程的私有堆栈；
●保存处理器PSW寄存器的值到被中止进程的私有堆栈；
●保存处理器SP寄存器的值到被中止进程的进程控制块；
●保存处理器其他寄存器的值到被中止进程的私有堆栈；
●自待运行进程的进程控制块取SP值并存入处理器的寄存器SP；
●自待运行进程的私有堆栈恢复处理器各寄存器的值；
●自待运行进程的私有堆栈中弹出PSW值并送入处理器的PSW；
●自待运行进程的私有堆栈中弹出PC值并送入处理器的PC。</description>
    </item>
    
    <item>
      <title>10种入门级期权策略</title>
      <link>https://walkerliu.top/post/10%E7%A7%8D%E5%85%A5%E9%97%A8%E7%BA%A7%E6%9C%9F%E6%9D%83%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sat, 18 Feb 2023 11:21:54 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/10%E7%A7%8D%E5%85%A5%E9%97%A8%E7%BA%A7%E6%9C%9F%E6%9D%83%E7%AD%96%E7%95%A5/</guid>
      <description>投资者往往在对期权策略知之甚少的情况下贸然入场期权交易，然而实际上，基于不同的市场环境，有许多既能限制风险又能最大化回报的期权策略。稍加努力，交易者就可以学习如何利用期权所提供的灵活性和强大功能。
以下是每个投资者都应该知道的 10 种期权策略。
要点 ：
期权交易听起来可能很复杂，但大多数投资者可以使用一系列基本策略来提高回报、押注市场走势或对冲现有头寸。 Covered Call, collars, and Married Puts, 这三种期权是在你已经拥有对应仓位情况下的期权策略 Spreads 类型的期权策略需要你买入一张期权，同时卖出另一张期权 多头跨式组合和链式组合可以帮助你无论在股票上涨或者下跌中都可以获利 期权的价内价外是指的期权的underlying asset的价格对于期权持有者是否是有利的，因为期权价值不仅仅包括行权价的价值也包括时间价值，这里讨论的策略的描述仅仅只是指其行权价值。
对于持有Call期权的人来说，如果股票价格涨超了（大于）期权行权价，那么就是价内，否则就是价外 对于持有Put期权的人来说，如果股票价格跌超了（小于）期权的行权价，那么就是价外，否则就是价内 简单的来说，如果此时期权对于权力方有利可图就是价内，无利可图就是价外 还有另外一种叫做ATM, 就是行权价和当前股票价格一致的期权。 Covered Call Covered Call策略非常适合那些长期的价值投资者，这种策略可以见效你手里资产在未来不确定环境中的风险。然而这个代价就是如果未来市场方向和你判断方向相反，你会损失一部分上涨对持有现货带来的收益。
比如说，现在你持有一手股票，现价是 $X$ 美元。 但是你判断在未来半年内特斯拉股价上涨动力有限甚至有下跌风险，那么你就可以卖出一张到期日是半年以后，行权价是$$S$$美元的看涨期权(Call Option)，价格为$Y$，这样你就可以拿到这个权利金$Y$ * 100 。 到期日时情况存在两种可能
股票没有涨到 $X + Y$ 以上，你卖出的期权已经在价外，期权持有人放弃行权，那么你收获权利金$Y * 100$ 如果股票涨到了 $X + Y$ 以上，那么你卖出的期权在价内，期权持有人选择行权，那么你就需要以行权价 $S$将股票卖给期权持有人。 可以看出期权的盈亏平衡点是在$X + Y$， 另外，因为你是持有正向的头寸的。且正向头寸价格上涨的收益是大于Call期权带来的损失的，比如股票现价为10，卖出行权价为15的 Call期权获得权益金 2 usd，到期日的时如果 股票上涨到18usd，那么你的收益将是 15 - 10 + 3 = 8 usd。 即股票涨到了strike price以上，那么你的收益将是固定的。
收益曲线如下。
最大的亏损： 股票仓位 - 权益金 最大收益: （行权价 - 正股成本） * 数量 + 权益金 盈亏平衡点： （行权价 * 数量 - 权益金）/ 数量 在上面的损益 (P&amp;amp;L) 图中，观察到随着股价上涨，看涨期权的负损益被多头头寸抵消。 可以</description>
    </item>
    
    <item>
      <title>HTTP Status Code 含义及适用场景(Part I)</title>
      <link>https://walkerliu.top/post/http-status-code-%E5%90%AB%E4%B9%89%E5%8F%8A%E5%BA%94%E7%94%A8part-i/</link>
      <pubDate>Tue, 01 Feb 2022 22:50:18 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/http-status-code-%E5%90%AB%E4%B9%89%E5%8F%8A%E5%BA%94%E7%94%A8part-i/</guid>
      <description>翻译自原文
1XX 1XX的HTTP Status Code只作为临时响应，并且，HTTP 1.0 的Client并不支持这个1XX的状态码，对于代理而言，代理需要转发1XX的HTTP Status Code
100 Continue Server通知Client请求已经已经被接收且Client 需要继续将未发送完毕的请求发送到Server端，如果Client已经发送完所有的请求，忽略此响应。
100 这个Status Code可以用于作为Pre-Check HTTP Request， 例如说Client准备发送一个很大请求体的请求，Client可以通过Header检查请求是否合法来进行一次p re check，如果check通过，Client再进行接下来的操作。
101 Switch Protocals Server 收到了ClientSwich Protocals的请求并且准备根据Client的Header切换协议，例如Web Socket的握手请求Header和Response的Header :
The handshake from the client looks as follows: GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13 The handshake from the server looks as follows: HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat 2XX 此类的Status Code表明Server 收到，接受并且成功处理了Client的请求。</description>
    </item>
    
    <item>
      <title>Coursera顺利完成的第一门课程</title>
      <link>https://walkerliu.top/post/coursera%E9%A1%BA%E5%88%A9%E5%AE%8C%E6%88%90%E7%9A%84%E7%AC%AC%E4%B8%80%E9%97%A8%E8%AF%BE%E7%A8%8B/</link>
      <pubDate>Sun, 21 Feb 2021 14:03:55 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/coursera%E9%A1%BA%E5%88%A9%E5%AE%8C%E6%88%90%E7%9A%84%E7%AC%AC%E4%B8%80%E9%97%A8%E8%AF%BE%E7%A8%8B/</guid>
      <description>学到了很多，从基本的加密原理到DES原理，到 Advanced Encryption Standard 再到简单的RSA。 全部英语教学，开着英文字幕也算是啃下来了，让我这种非纯科班出身的野路子码工能Day Day Up。
接下来还有量化的课程要上，但是工作又忙，还有英语口语，加油吧。 ✊ ✊ ​</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; Typora &#43; Github Action 完美博客</title>
      <link>https://walkerliu.top/post/%E4%BD%BF%E7%94%A8-hugo-&#43;-typora-&#43;-github-action-%E5%AE%8C%E7%BE%8E%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Feb 2021 22:50:18 +0800</pubDate>
      
      <guid>https://walkerliu.top/post/%E4%BD%BF%E7%94%A8-hugo-&#43;-typora-&#43;-github-action-%E5%AE%8C%E7%BE%8E%E5%8D%9A%E5%AE%A2/</guid>
      <description>安装Hugo 在本地安装 Hugo,
brew install hugo 安装成功后查看Hugo 版本 hugo version
➜ blog git:(main) hugo version hugo v0.91.0+extended darwin/amd64 BuildDate=unknown 创建一个site，site其实就是一个博客地址 : hugo new site test
➜ workspace hugo new site test Congratulations! Your new Hugo site is created in /Users/mac/workspace/test. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://walkerliu.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1clb%E5%8F%98%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E7%86%94%E6%96%AD%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://walkerliu.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1clb%E5%8F%98%E5%8A%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E7%86%94%E6%96%AD%E9%97%AE%E9%A2%98/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
